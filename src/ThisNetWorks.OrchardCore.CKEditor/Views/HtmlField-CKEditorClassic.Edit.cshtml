@model OrchardCore.ContentFields.ViewModels.EditHtmlFieldViewModel
@using OrchardCore.ContentManagement.Metadata.Models
@using OrchardCore.ContentFields.Settings;

@{
    var settings = Model.PartFieldDefinition.GetSettings<HtmlFieldSettings>();
    var culture = await Orchard.GetContentCultureAsync(Model.Field.ContentItem);
}

@* To override this with a custom build register a IResourceManifestProvider with the name ckeditorclassic and include it in your pipeline first? or last?*@
<script asp-name="CKEditorClassic" asp-src="~/ThisNetWorks.OrchardCore.CKEditor/scripts/ckeditor-classic-orchardcore/ckeditor.js" at="Foot" depends-on="admin"></script>

<div class="form-group">
    <label asp-for="Html">@Model.PartFieldDefinition.DisplayName()</label>
    @if (culture.IsRightToLeft())
    {
        <div style="text-align:right">
            <textarea asp-for="Html" class="form-control"></textarea>
        </div>
    }
    else
    {
        <textarea asp-for="Html" class="form-control"></textarea>
    }

    @if (!String.IsNullOrEmpty(settings.Hint))
    {
        <span class="hint">@settings.Hint</span>
    }
</div>

<script at="Foot" type="text/javascript">
    var optionsTextArea = document.getElementById('@Html.IdFor(x => x.Html)');
    // When part rendered by a flow part only the elements scripts are rendered, so the html element will not exist.
    if (optionsTextArea) {
        const editor = ClassicEditor
            .create(optionsTextArea
            //, {
                // yup perfect. let's move them to a site setting, and a content definition setting.
        //toolbar: [ 'heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote' ]
          //  }
       )
            .catch(error => {
                console.error(error);
            });

        // TODO check out toolbar configuration. Perhaps have a default site setting for each editor
        // and provide override options in the content type editor?
        editor.then(e => {
            e.model.document.on( 'change:data', () => {
                // Update the text area source element.
                e.updateSourceElement();
                // Then trigger render.
                $(document).trigger('contentpreview:render');
            } );
        });
    }
</script>

